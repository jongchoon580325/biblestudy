[카테고리 관리 권장 진행 방향]
카테고리 관리(그룹/하위카테고리) UI/로직 코드 완전 수정.
카테고리 데이터 구조 및 저장/수정/삭제 로직을 명확하게 재설계.
사람이 읽을 수 있는 id, name만 저장.
인코딩/디코딩 없이 한글 그대로 저장/출력.
불필요한 임시 처리, 예외처리, 임시 디코딩 코드 모두 제거.
최소한의 기능부터 정상 동작 확인 후 점진적 확장.
그룹 추가 → 하위 추가 → 수정/삭제 → UI 연동.

[추가 고려 사항]
이 과정에서 카테고리 데이터와 실제 자료실(성경자료실 등) 간의 참조 구조도 명확히 맞춰야 함.
클린 리팩토링 후, 데이터가 한글로 정상적으로 보이게 해야함.
백업/복구, 자료실 연동까지 모두 일관성 있게 동작할 수 있게 철저하게 로직을 구현해야 함.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# 카테고리 관리 콤포넌트 계획

## 1. 데이터 구조 설계
```typescript
interface Category {
  id: string;          // 사람이 읽을 수 있는 고유 ID (예: 'old-testament', 'new-testament')
  name: string;        // 한글 카테고리명 (예: '구약성경', '신약성경')
  type: 'group' | 'sub'; // 그룹/하위 구분
  parentId?: string;   // 하위 카테고리인 경우 상위 카테고리 ID
  order: number;       // 정렬 순서
  createdAt: Date;     // 생성일
  updatedAt: Date;     // 수정일
}
```

## 2. 작업 단계

### 2.1 기본 구조 설정
- [ ] 카테고리 관리 컴포넌트 생성 (`CategoryManagement.tsx`)
- [ ] IndexedDB 서비스에 카테고리 관련 메서드 추가
- [ ] Redux 스토어에 카테고리 상태 관리 추가

### 2.2 그룹 카테고리 기능
- [ ] 그룹 카테고리 목록 표시
- [ ] 그룹 카테고리 추가 기능
- [ ] 그룹 카테고리 수정 기능
- [ ] 그룹 카테고리 삭제 기능
- [ ] 그룹 카테고리 순서 변경 기능

### 2.3 하위 카테고리 기능
- [ ] 하위 카테고리 목록 표시
- [ ] 하위 카테고리 추가 기능
- [ ] 하위 카테고리 수정 기능
- [ ] 하위 카테고리 삭제 기능
- [ ] 하위 카테고리 순서 변경 기능

### 2.4 UI/UX 구현
- [ ] 드래그 앤 드롭으로 순서 변경
- [ ] 카테고리 추가/수정 모달
- [ ] 삭제 확인 다이얼로그
- [ ] 로딩/에러 상태 처리
- [ ] 반응형 디자인 적용

### 2.5 데이터 연동
- [ ] 자료실과 카테고리 연동
- [ ] 백업/복구 기능 연동
- [ ] 카테고리 초기화 기능

## 3. 구현 우선순위

1. 기본 데이터 구조 및 IndexedDB 연동
2. 그룹 카테고리 CRUD 기능
3. 하위 카테고리 CRUD 기능
4. UI/UX 개선
5. 자료실 연동
6. 백업/복구 연동

## 4. 테스트 계획

### 4.1 단위 테스트
- [ ] 카테고리 데이터 구조 검증
- [ ] CRUD 작업 검증
- [ ] 순서 변경 로직 검증

### 4.2 통합 테스트
- [ ] 자료실 연동 검증
- [ ] 백업/복구 기능 검증
- [ ] 한글 처리 검증

## 5. 주의사항

1. 모든 카테고리명은 한글 그대로 저장/출력
2. ID는 영문 소문자, 하이픈(-)만 사용
3. 순서 변경 시 order 값 자동 업데이트
4. 삭제 시 하위 카테고리도 함께 삭제
5. 자료실 연동 시 참조 무결성 유지

